<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Asus WebStorage/psabin@gmail.com/MySyncFolder/Data Science Course/E-Commerce/eshop_database.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="150"/><column_width id="3" width="1411"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,9:mainAddresses"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Addresses" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="133"/><column index="2" value="127"/><column index="3" value="166"/><column index="4" value="182"/><column index="5" value="132"/><column index="6" value="92"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Customer" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="142"/><column index="2" value="124"/><column index="3" value="136"/><column index="4" value="117"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Customers" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="142"/><column index="2" value="124"/><column index="3" value="136"/><column index="4" value="117"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="OrderDetails" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="91"/><column index="2" value="155"/><column index="3" value="190"/><column index="4" value="108"/><column index="5" value="109"/><column index="6" value="101"/><column index="7" value="108"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Orders" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="2" mode="0"/></sort><column_widths><column index="1" value="155"/><column index="2" value="126"/><column index="3" value="113"/><column index="4" value="139"/><column index="5" value="142"/><column index="6" value="133"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Products" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="190"/><column index="2" value="300"/><column index="3" value="138"/><column index="4" value="151"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="addresses" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="1" mode="0"/></sort><column_widths><column index="1" value="133"/><column index="2" value="127"/><column index="3" value="166"/><column index="4" value="182"/><column index="5" value="143"/><column index="6" value="86"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="customers" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="147"/><column index="2" value="131"/><column index="3" value="136"/><column index="4" value="117"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="order_details" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="1" mode="1"/></sort><column_widths><column index="1" value="92"/><column index="2" value="200"/><column index="3" value="219"/><column index="4" value="106"/><column index="5" value="107"/><column index="6" value="101"/><column index="7" value="108"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="orders" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="203"/><column index="2" value="134"/><column index="3" value="121"/><column index="4" value="139"/><column index="5" value="147"/><column index="6" value="133"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="products" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="233"/><column index="2" value="812"/><column index="3" value="169"/><column index="4" value="159"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">--Tech has largest sales, closely followed by office. Furniture way behind.
SELECT Category, ROUND(SUM(Sales),2) AS 'Category Sales'
FROM OrderDetails
JOIN Products ON OrderDetails.ProductID=Products.ProductID
GROUP BY Products.Category

--Tech has by far the largest profit, then furniture, then office.
-- No category is making a loss.
SELECT Category, ROUND(SUM(Profit),2) AS 'Category Profit'
FROM OrderDetails
JOIN Products ON OrderDetails.ProductID=Products.ProductID
GROUP BY Products.Category

--What are 5 states generating the maximum and minimum sales revenue?
SELECT Addresses.State, ROUND(SUM(Sales),2) AS 'State Sales'
FROM OrderDetails
JOIN Orders ON OrderDetails.OrderID=Orders.OrderID
JOIN Addresses ON Addresses.AddressID=Orders.AddressID
GROUP BY Addresses.State
ORDER BY SUM(Sales) DESC --or ASC
LIMIT 5

--What are the 3 products in each product segment with the highest sales?
SELECT ProductName, Category, ProductSales
FROM (
    SELECT 
        ProductName, 
        Category, 
        ROUND(SUM(Sales),2) AS ProductSales,
        RANK() OVER (PARTITION BY Category ORDER BY SUM(Sales) DESC) as Rank
    FROM Products
    JOIN OrderDetails ON OrderDetails.ProductID = Products.ProductID
	GROUP BY Products.ProductID
) AS RankedProducts
WHERE Rank &lt;= 3
ORDER BY Category, ProductSales DESC;


    --Are they the 3 most profitable products as well?
SELECT ProductName, Category, ProductProfit
FROM (
	SELECT ProductName, Category, ROUND(SUM(Profit),2) AS ProductProfit,
	RANK() OVER (PARTITION BY Category ORDER BY SUM(Profit) DESC) AS Rank
	FROM Products
	JOIN OrderDetails ON OrderDetails.ProductID=Products.ProductID
	GROUP BY Products.ProductID
) AS RankedProducts
WHERE Rank&lt;=3
ORDER BY Category, ProductProfit DESC;	
	
--What are the 3 best-seller products in each product segment? (Quantity-wise)

SELECT ProductName, SubCategory, UnitsSold
FROM (
	SELECT ProductName, SubCategory, SUM(Quantity) AS UnitsSold,
	RANK() OVER (PARTITION BY SubCategory ORDER BY SUM(Quantity) DESC) AS Rank
	FROM Products
	JOIN OrderDetails ON Products.ProductID=OrderDetails.ProductID
	GROUP BY Products.ProductID
) WHERE Rank &lt;=3
ORDER BY SubCategory, UnitsSold DESC;	

--What are the top 3 worst-selling products in every category? (Quantity-wise)
SELECT ProductName, Category, UnitsSold
FROM (
	SELECT ProductName, Category, SUM(Quantity) AS UnitsSold,
	RANK() OVER (PARTITION BY Category ORDER BY SUM(Quantity) ASC) AS lowRank
	FROM Products
	JOIN OrderDetails ON Products.ProductID=OrderDetails.ProductID
	GROUP BY Products.ProductID) 
WHERE lowRank &lt;=3	
ORDER BY Category, UnitsSold ASC;	

--How many unique customers per month are there for the year 2016. (There's a catch here: contrary to other 'heavier' 
--RDBMS, SQLite does not support the functions YEAR() or MONTH() to extract the year or the month in a date. You will 
--have to create two new columns: year and month.)
SELECT 
    strftime('%Y-%m', OrderDate) AS Month, 
    COUNT(DISTINCT CustomerID) AS UniqueCustomers
FROM 
    Orders
WHERE strftime('%Y', OrderDate) = '2016'
GROUP BY 
    strftime('%Y-%m', OrderDate);

-- Get cost price
SELECT * , ROUND(((Sales*Discount) + Sales)/Quantity, 2) AS UnitListPrice,
ROUND((Sales - Profit)/Quantity, 2) AS UnitCostPrice
FROM OrderDetails
ORDER BY ProductID

-- Sales by month
SELECT 
    strftime('%m', OrderDate) AS Month, ROUND(SUM(Sales),2) AS TotalSales
FROM 
    OrderDetails
JOIN Orders ON Orders.OrderID=OrderDetails.OrderID          
GROUP BY 
    strftime('%m', OrderDate);
-- Unique Products
SELECT *
FROM Products
--Which customers made the highest number of orders? 
SELECT OrderID, Orders.CustomerID, Addresses.State, COUNT(OrderID) AS OrderCount
FROM Orders
JOIN Addresses ON Addresses.AddressID=Orders.AddressID
GROUP BY Orders.CustomerID
ORDER BY COUNT(OrderID) DESC
-- Highest spending customers?
SELECT CustomerID, SUM(Sales) AS TotalSpent, COUNT(ProductID) AS ItemsBought, State
FROM Orders
JOIN OrderDetails ON Orders.OrderID=OrderDetails.OrderID
JOIN Addresses ON Addresses.AddressID=Orders.AddressID
GROUP BY Orders.CustomerID
ORDER BY SUM(Sales) DESC
-- States with highest Sales
SELECT CustomerID, ROUND(SUM(Sales),2) AS TotalSpent, COUNT(ProductID) AS ItemsBought, State
FROM Orders
JOIN OrderDetails ON Orders.OrderID=OrderDetails.OrderID
JOIN Addresses ON Addresses.AddressID=Orders.AddressID
GROUP BY Addresses.State
ORDER BY SUM(Sales) DESC
-- Segment sales
SELECT Orders.CustomerID, ROUND(SUM(Sales),2) AS TotalSpent, COUNT(ProductID) AS ItemsBought, State, Segment
FROM Orders
JOIN OrderDetails ON Orders.OrderID=OrderDetails.OrderID
JOIN Addresses ON Addresses.AddressID=Orders.AddressID
JOIN Customers on Customers.CustomerID=Orders.CustomerID          
GROUP BY Customers.Segment
ORDER BY SUM(Sales) DESC
-- Average order value 
SELECT ROUND(SUM(Sales),2) AS SumOfSales, COUNT(OrderID) AS NumberOfOrders, ROUND(SUM(Sales)/COUNT(OrderID),2) AS AverageOrderValue
FROM OrderDetails
-- Average order value by state 
SELECT ROUND(SUM(Sales),2) AS SumOfSales, COUNT(OrderDetails.OrderID) AS NumberOfOrders, ROUND(SUM(Sales)/COUNT(OrderDetails.OrderID),2) AS AverageOrderValue, State
FROM Orders
JOIN OrderDetails ON Orders.OrderID=OrderDetails.OrderID
JOIN Addresses ON Addresses.AddressID=Orders.AddressID
GROUP BY State
ORDER BY AverageOrderValue DESC;
-- Window function: running total sales
SELECT RowID, Sales, 
ROUND(SUM(Sales) OVER (ORDER BY RowID),2) AS RunningTotalSales
FROM OrderDetails
-- Window function: running average sales
SELECT RowID, Sales, 
ROUND(AVG(Sales) OVER (ORDER BY RowID),2) AS RunningAverageSales
FROM OrderDetails
-- Group by subcategory, get aggregate figures and - applying a window function - get the quartile
SELECT SubCategory, ROUND(AVG(Sales),2) AS AvgSales, 
COUNT(Sales) AS CountSales, 
ROUND(SUM(Sales),2) AS TotalSales,
NTILE(4) OVER (ORDER BY SUM(Sales) DESC) AS SalesQuartile
FROM OrderDetails
JOIN Products ON Products.ProductID=OrderDetails.ProductID
GROUP BY SubCategory
ORDER BY TotalSales DESC
-- Table of repeat purchases 
SELECT *, ROUND(RunningSalesTotal,2) FROM (
SELECT CustomerID, RowID, Sales,
COUNT(CustomerID) OVER (PARTITION BY CustomerID ORDER BY RowID) AS NthCustomerOrder,
SUM(Sales) OVER (ORDER BY RowID) AS RunningSalesTotal
FROM OrderDetails
JOIN Orders ON OrderDetails.OrderID=Orders.OrderID) AS SubQuery
WHERE NthCustomerOrder&gt;1
ORDER BY RowID;
-- Repeat purchase total
WITH RankedOrders AS (
    SELECT 
        Orders.CustomerID, 
        OrderDetails.Sales,
        ROW_NUMBER() OVER (PARTITION BY Orders.CustomerID ORDER BY Orders.OrderDate) AS OrderRank
    FROM OrderDetails
    JOIN Orders ON OrderDetails.OrderID = Orders.OrderID
)

SELECT SUM(Sales) AS TotalSalesFromSubsequentOrders
FROM RankedOrders
WHERE OrderRank &gt; 1;
-- Several common table expressions (CTEs) to calculate repeat purchase rate
WITH RankedOrders AS (
    SELECT 
        Orders.CustomerID, 
        OrderDetails.Sales,
        ROW_NUMBER() OVER (PARTITION BY Orders.CustomerID ORDER BY Orders.OrderDate) AS OrderRank
    FROM OrderDetails
    JOIN Orders ON OrderDetails.OrderID = Orders.OrderID
),
TotalSalesFromSubsequentOrders AS (
    SELECT SUM(Sales) AS SalesFromSubsequentOrders
    FROM RankedOrders
    WHERE OrderRank &gt; 1
),
TotalSales AS (
    SELECT SUM(Sales) AS TotalSales
    FROM OrderDetails
)

SELECT 
    (SELECT SalesFromSubsequentOrders FROM TotalSalesFromSubsequentOrders) / 
    (SELECT TotalSales FROM TotalSales) AS ProportionOfTotalSales
FROM TotalSales;


-- Track RPR over time with order by window function</sql><current_tab id="0"/></tab_sql></sqlb_project>
